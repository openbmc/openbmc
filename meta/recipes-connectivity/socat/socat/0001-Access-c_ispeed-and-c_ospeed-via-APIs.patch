From fb10ab134d630705cae0c7be42437cc289af7d32 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Tue, 15 Mar 2016 21:36:02 +0000
Subject: [PATCH] Use __c_ispeed and __c_ospeed on musl

Original intention of these asserts is to find if termios structure
is mapped correctly to locally define union, the get* APIs for
baudrate would not do the right thing since they do not return the
value from c_ospeed/c_ispeed but the value which is stored in iflag
for baudrate.

So we check if we are on Linux but not using glibc then we use
__c_ispeed and __c_ospeed as defined in musl, however these are
internal elements of structs it should not have been used this
way.

Signed-off-by: Khem Raj <raj.khem@gmail.com>

---
Upstream-Status: Pending

 xioinitialize.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/xioinitialize.c b/xioinitialize.c
index 9f50155..8fb2e4c 100644
--- a/xioinitialize.c
+++ b/xioinitialize.c
@@ -65,6 +65,12 @@ int xioinitialize(void) {
 #if HAVE_TERMIOS_ISPEED && (ISPEED_OFFSET != -1) && (OSPEED_OFFSET != -1)
 #if defined(ISPEED_OFFSET) && (ISPEED_OFFSET != -1)
 #if defined(OSPEED_OFFSET) && (OSPEED_OFFSET != -1)
+#if defined(__linux__) && !defined(__GLIBC__)
+      tdata.termarg.__c_ispeed = 0x56789abc;
+      tdata.termarg.__c_ospeed = 0x6789abcd;
+      assert(tdata.termarg.__c_ispeed == tdata.speeds[ISPEED_OFFSET]);
+      assert(tdata.termarg.__c_ospeed == tdata.speeds[OSPEED_OFFSET]);
+#else
       tdata.termarg.c_ispeed = 0x56789abc;
       tdata.termarg.c_ospeed = 0x6789abcd;
       assert(tdata.termarg.c_ispeed == tdata.speeds[ISPEED_OFFSET]);
@@ -72,6 +78,7 @@ int xioinitialize(void) {
 #endif
 #endif
 #endif
+#endif
    }
 #endif
 
-- 
2.8.0

