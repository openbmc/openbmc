From 2e3b90d44a5606b04ce82007f8fe0fc91d6fd3fd Mon Sep 17 00:00:00 2001
From: SERGEY SOLOMIN <sergey.solomin@us.ibm.com>
Date: Mon, 1 Aug 2016 14:21:46 -0500
Subject: [PATCH 1/1] 4 byte read support #466

---
 tools/i2cdump.c | 173 +++++++++++++++++++++++++++++---------------------------
 1 file changed, 90 insertions(+), 83 deletions(-)

diff --git a/tools/i2cdump.c b/tools/i2cdump.c
index a7bba72..f47309e 100644
--- a/tools/i2cdump.c
+++ b/tools/i2cdump.c
@@ -1,4 +1,4 @@
-/*
+/*  
     i2cdump.c - a user-space program to dump I2C registers
     Copyright (C) 2002-2003  Frodo Looijaard <frodol@dds.nl>, and
                              Mark D. Studebaker <mdsxyz123@yahoo.com>
@@ -46,6 +46,7 @@ static void help(void)
 		"    s (SMBus block)\n"
 		"    i (I2C block)\n"
 		"    c (consecutive byte)\n"
+		"    d (4 consecutive bytes)\n"
 		"    Append p for SMBus PEC\n");
 }
 
@@ -181,7 +182,7 @@ int main(int argc, char *argv[])
 	} else if (!strncmp(argv[flags+3], "s", 1)) {
 		size = I2C_SMBUS_BLOCK_DATA;
 		pec = argv[flags+3][1] == 'p';
-	} else if (!strncmp(argv[flags+3], "c", 1)) {
+	} else if ((!strncmp(argv[flags+3], "c", 1)) || (!strncmp(argv[flags+3], "d", 1))) {
 		size = I2C_SMBUS_BYTE;
 		pec = argv[flags+3][1] == 'p';
 	} else if (!strcmp(argv[flags+3], "i"))
@@ -338,7 +339,7 @@ int main(int argc, char *argv[])
 				res = i2c_smbus_read_block_data(file, bank,
 				      cblock);
 				/* Remember returned block length for a nicer
-				   display later */
+ * 				   display later */
 				s_length = res;
 			} else {
 				for (res = 0; res < 256; res += i) {
@@ -364,99 +365,105 @@ int main(int argc, char *argv[])
 					block[i] = -1;
 		}
 
-		if (size == I2C_SMBUS_BYTE) {
-			res = i2c_smbus_write_byte(file, first);
-			if(res != 0) {
-				fprintf(stderr, "Error: Write start address "
-					"failed, return code %d\n", res);
-				exit(1);
+		if (!strncmp (argv[flags + 3], "d", 1)) {
+         		 printf ("%02x %02x %02x %02x\n", i2c_smbus_read_byte (file),
+                 		 i2c_smbus_read_byte (file), i2c_smbus_read_byte (file),
+                      		 i2c_smbus_read_byte (file));
+		} else {
+          		if (size == I2C_SMBUS_BYTE) {
+				res = i2c_smbus_write_byte(file, first);
+				if(res != 0) {
+					fprintf(stderr, "Error: Write start address "
+						"failed, return code %d\n", res);
+					exit(1);
+				}
 			}
-		}
 
-		printf("     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f"
-		       "    0123456789abcdef\n");
-		for (i = 0; i < 256; i+=16) {
-			if (size == I2C_SMBUS_BLOCK_DATA && i >= s_length)
-				break;
-			if (i/16 < first/16)
-				continue;
-			if (i/16 > last/16)
-				break;
+			printf("     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f"
+			       "    0123456789abcdef\n");
+			for (i = 0; i < 256; i+=16) {
+				if (size == I2C_SMBUS_BLOCK_DATA && i >= s_length)
+					break;
+				if (i/16 < first/16)
+					continue;
+				if (i/16 > last/16)
+					break;
 
-			printf("%02x: ", i);
-			for (j = 0; j < 16; j++) {
-				fflush(stdout);
-				/* Skip unwanted registers */
-				if (i+j < first || i+j > last) {
-					printf("   ");
-					if (size == I2C_SMBUS_WORD_DATA) {
+				printf("%02x: ", i);
+				for (j = 0; j < 16; j++) {
+					fflush(stdout);
+					/* Skip unwanted registers */
+					if (i+j < first || i+j > last) {
 						printf("   ");
-						j++;
+						if (size == I2C_SMBUS_WORD_DATA) {
+							printf("   ");
+							j++;
+						}
+						continue;
 					}
-					continue;
-				}
 
-				if (size == I2C_SMBUS_BYTE_DATA) {
-					block[i+j] = res =
-					  i2c_smbus_read_byte_data(file, i+j);
-				} else if (size == I2C_SMBUS_WORD_DATA) {
-					res = i2c_smbus_read_word_data(file,
-								       i+j);
-					if (res < 0) {
-						block[i+j] = res;
-						block[i+j+1] = res;
+					if (size == I2C_SMBUS_BYTE_DATA) {
+						block[i+j] = res =
+						  i2c_smbus_read_byte_data(file, i+j);
+					} else if (size == I2C_SMBUS_WORD_DATA) {
+						res = i2c_smbus_read_word_data(file,
+									       i+j);
+						if (res < 0) {
+							block[i+j] = res;
+							block[i+j+1] = res;
+						} else {
+							block[i+j] = res & 0xff;
+							block[i+j+1] = res >> 8;
+						}
+					} else if (size == I2C_SMBUS_BYTE) {
+						block[i+j] = res =
+						  i2c_smbus_read_byte(file);
+					} else
+						res = block[i+j];
+
+					if (size == I2C_SMBUS_BLOCK_DATA
+					 && i+j >= s_length) {
+						printf("   ");
+					} else if (res < 0) {
+						printf("XX ");
+						if (size == I2C_SMBUS_WORD_DATA)
+							printf("XX ");
 					} else {
-						block[i+j] = res & 0xff;
-						block[i+j+1] = res >> 8;
+						printf("%02x ", block[i+j]);
+						if (size == I2C_SMBUS_WORD_DATA)
+							printf("%02x ", block[i+j+1]);
 					}
-				} else if (size == I2C_SMBUS_BYTE) {
-					block[i+j] = res =
-					  i2c_smbus_read_byte(file);
-				} else
-					res = block[i+j];
-
-				if (size == I2C_SMBUS_BLOCK_DATA
-				 && i+j >= s_length) {
-					printf("   ");
-				} else if (res < 0) {
-					printf("XX ");
 					if (size == I2C_SMBUS_WORD_DATA)
-						printf("XX ");
-				} else {
-					printf("%02x ", block[i+j]);
-					if (size == I2C_SMBUS_WORD_DATA)
-						printf("%02x ", block[i+j+1]);
+						j++;
 				}
-				if (size == I2C_SMBUS_WORD_DATA)
-					j++;
-			}
-			printf("   ");
+				printf("   ");
 
-			for (j = 0; j < 16; j++) {
-				if (size == I2C_SMBUS_BLOCK_DATA
-				 && i+j >= s_length)
-					break;
-				/* Skip unwanted registers */
-				if (i+j < first || i+j > last) {
-					printf(" ");
-					continue;
-				}
+				for (j = 0; j < 16; j++) {
+					if (size == I2C_SMBUS_BLOCK_DATA
+					 && i+j >= s_length)
+						break;
+					/* Skip unwanted registers */
+					if (i+j < first || i+j > last) {
+						printf(" ");
+						continue;
+					}
 
-				res = block[i+j];
-				if (res < 0)
-					printf("X");
-				else
-				if ((res & 0xff) == 0x00
-				 || (res & 0xff) == 0xff)
-					printf(".");
-				else
-				if ((res & 0xff) < 32
-				 || (res & 0xff) >= 127)
-					printf("?");
-				else
-					printf("%c", res & 0xff);
+					res = block[i+j];
+					if (res < 0)
+						printf("X");
+					else
+					if ((res & 0xff) == 0x00
+					 || (res & 0xff) == 0xff)
+						printf(".");
+					else
+					if ((res & 0xff) < 32
+					 || (res & 0xff) >= 127)
+						printf("?");
+					else
+						printf("%c", res & 0xff);
+				}
+				printf("\n");
 			}
-			printf("\n");
 		}
 	} else {
 		printf("     0,8  1,9  2,a  3,b  4,c  5,d  6,e  7,f\n");
-- 
1.8.2.2

